// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDataClient is the client API for UserData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataClient interface {
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserData_GetUsersClient, error)
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type userDataClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataClient(cc grpc.ClientConnInterface) UserDataClient {
	return &userDataClient{cc}
}

func (c *userDataClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserData_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserData_ServiceDesc.Streams[0], "/protos.UserData/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userDataGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserData_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userDataGetUsersClient struct {
	grpc.ClientStream
}

func (x *userDataGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userDataClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.UserData/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.UserData/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protos.UserData/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protos.UserData/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServer is the server API for UserData service.
// All implementations must embed UnimplementedUserDataServer
// for forward compatibility
type UserDataServer interface {
	GetUsers(*Empty, UserData_GetUsersServer) error
	GetUser(context.Context, *Id) (*User, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*Status, error)
	DeleteUser(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedUserDataServer()
}

// UnimplementedUserDataServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataServer struct {
}

func (UnimplementedUserDataServer) GetUsers(*Empty, UserData_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserDataServer) GetUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserDataServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserDataServer) UpdateUser(context.Context, *User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserDataServer) DeleteUser(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserDataServer) mustEmbedUnimplementedUserDataServer() {}

// UnsafeUserDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataServer will
// result in compilation errors.
type UnsafeUserDataServer interface {
	mustEmbedUnimplementedUserDataServer()
}

func RegisterUserDataServer(s grpc.ServiceRegistrar, srv UserDataServer) {
	s.RegisterService(&UserData_ServiceDesc, srv)
}

func _UserData_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserDataServer).GetUsers(m, &userDataGetUsersServer{stream})
}

type UserData_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userDataGetUsersServer struct {
	grpc.ServerStream
}

func (x *userDataGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserData_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserData/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserData_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserData/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserData_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserData/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserData_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserData/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// UserData_ServiceDesc is the grpc.ServiceDesc for UserData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserData",
	HandlerType: (*UserDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserData_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserData_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserData_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserData_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _UserData_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
